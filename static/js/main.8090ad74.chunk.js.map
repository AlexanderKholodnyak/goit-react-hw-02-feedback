{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/NotificationMessage/NotificationMessage.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onFeedback","map","option","type","data-action","onClick","Statistics","good","neutral","bad","total","positivePercentage","NotificationMessage","message","App","state","onFeedbackRefresh","target","dataset","action","setState","prevState","onTotalFeedback","onPositive","Math","round","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAceA,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,gCACE,6BAAKD,IACJC,MCkBUC,EApBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,WAAZ,OACtB,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBACEC,KAAK,SACLC,cAAaF,EACbG,QAASL,EAHX,SAMGE,GAFIA,SCUEI,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,gCACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,mDAAsBC,EAAtB,WCEWC,MARf,YAA2C,IAAZC,EAAW,EAAXA,QAC7B,OAAO,4BAAIA,KC0DEC,E,4MAtDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAIPO,kBAAoB,YAAiB,IAC7Bb,EAD4B,EAAbc,OACDC,QAAQC,OAC5B,EAAKC,UAAS,SAAAC,GACZ,OAAO,eAAGlB,EAAOkB,EAAUlB,GAAQ,O,EAGvCmB,gBAAkB,WAAO,IAAD,EACS,EAAKP,MACpC,OAFsB,EACdR,KADc,EACRC,QADQ,EACCC,K,EAIzBc,WAAa,WACX,OAAO,EAAKD,kBACRE,KAAKC,MAAO,EAAKV,MAAMR,KAAO,EAAKe,kBAAqB,KACxD,G,uDAGI,IAAD,EACwBI,KAAKX,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAGvB,OACE,qCACE,cAAC,EAAD,CAASb,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QANQ,CAAC,OAAQ,UAAW,OAO5BC,WAAY0B,KAAKV,sBAGrB,cAAC,EAAD,CAASpB,MAAM,aAAf,SACG8B,KAAKJ,kBACJ,cAAC,EAAD,CACEf,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,KAAKJ,kBACZX,mBAAoBe,KAAKH,eAG3B,cAAC,EAAD,CAAcV,QAAQ,oBAAtB,wB,GA/CMc,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8090ad74.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <div>\n    <h2>{title}</h2>\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onFeedback }) => (\n  <div>\n    {options.map(option => (\n      <button\n        type=\"button\"\n        data-action={option}\n        onClick={onFeedback}\n        key={option}\n      >\n        {option}\n      </button>\n    ))}\n  </div>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array,\n  onFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <div>\n    <p>Good : {good}</p>\n    <p>Neutral : {neutral}</p>\n    <p>Bad : {bad}</p>\n    <p>Total : {total}</p>\n    <p>Positive Feedback:{positivePercentage}%</p>\n  </div>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\n\nfunction NotificationMessage({ message }) {\n  return <p>{message}</p>;\n}\n\nNotificationMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default NotificationMessage;\n","import React, { Component } from 'react';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Notification from './components/NotificationMessage';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n    // total: 0,\n  };\n\n  onFeedbackRefresh = ({ target }) => {\n    const type = target.dataset.action;\n    this.setState(prevState => {\n      return { [type]: prevState[type] + 1 };\n    });\n  };\n  onTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  onPositive = () => {\n    return this.onTotalFeedback()\n      ? Math.round((this.state.good / this.onTotalFeedback()) * 100)\n      : 0;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = ['good', 'neutral', 'bad'];\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onFeedback={this.onFeedbackRefresh}\n          ></FeedbackOptions>\n        </Section>\n        <Section title=\"Statistics\">\n          {this.onTotalFeedback() ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.onTotalFeedback()}\n              positivePercentage={this.onPositive()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\">)</Notification>\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}